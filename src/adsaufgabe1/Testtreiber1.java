
package adsaufgabe1;

import java.nio.CharBuffer;

public class Testtreiber {
    public static void main(String[] args) {

// 1: Aufgabenblatt Testfall 1
        String[] feld1 = {"aaa", "bba", "aba", "aab"};
        int invSoll1 = 5;

// 2: Aufgabenblatt Testfall 2
        String[] feld2 = {"aba", "baaza", "cccba", "abab", "bab", "baaaa", "bazbab"};
        int invSoll2 = 9;

// 3: kein a
        String[] feld3 = {"b", "bgfd", "bfdsb", "hhbbg", "bbbbbbbxc"};
        int invSoll3 = 3;

// 4: kein b
        String[] feld4 = {"kfdsia", "goaj", "eskjag", "alara", "istag", "jfkslriat", "gkalfkds", "utrjia", "arslgil", "mvamsdr", "aijtj", "fgdksalrt", "gjsakl"};
        int invSoll4 = 38;

// 5: erster unsortiert
        String[] feld5 = {"bcd", "aaaa", "aaa", "aa", "a"};
        int invSoll5 = 4;

// 6: kein a und b
        String[] feld6 = {"gfkd", "je", "irutgk", "jfl", "klxmfkriwer", "lfkiog", "jfsl", "girg", "fkdj", "eirut", "gkjf", "lklxmfkri", "werlfki", "ogjfslgir"};
        int invSoll6 = 0;

// 7: Feld der LÃ¤nge 1
        String[] feld7 = {"bgfakd"};
        int invSoll7 = 0;

// 8: fast umgekehrt sortiert
        String[] feld8 = {"cccba", "ccbca", "cbcca", "bccca", "cccab", "ccbac", "cbcac", "bccac", "ccacb", "ccabc", "cbacc", "bcacc", "caccb", "cacbc", "cabcc", "baccc", "acccb", "accbc", "acbcc", "abccc"};
        int invSoll8 = 160;

// 9: umgekehrt sortiert
        String[] feld9 = {"bccca", "cbcca", "ccbca", "cccba", "bccac", "cbcac", "ccbac", "cccab", "bcacc", "cbacc", "ccabc", "ccacb", "baccc", "cabcc", "cacbc", "caccb", "abccc", "acbcc", "accbc", "acccb"};
        int invSoll9 = 190;

// 10: sehr lange Strings
        String[] feld10 = {"dhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhbjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljbhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhbjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhadgkhdlhjdgkhjddhjdhdljhdgkbhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjd", "dhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjdadhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdblhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjbdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdblhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhbjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjddhjdhdljhdgkhdlhjdgkhjd"};
        int invSoll10 = 1;

// 11: exterm langer String
        String a = CharBuffer.allocate(100000).toString().replace('\0', 'b');
        String b = "bccccccccccccccccccccccccccccccccccc";
        String[] feld11 = new String[2];
        feld11[0] = b;
        feld11[1] = a;
        int invSoll11 = 1;

// 12: fast gleiche Strings
        String[] feld12 = {"bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca"};
        int invSoll12 = 0;

// 13: fast gleiche Strings bis auf letztes
        String[] feld13 = {"bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "acb"};
        int invSoll13 = 135;

// 14: fast gleiche Strings bis auf erstes
        String[] feld14 = {"bcac", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca"};
        int invSoll14 = 135;

// 15: fast gleiche Strings (erstes), noch mehr
        String[] feld15 = {"bcac", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca", "bca"};
        int invSoll15 = 675;

// 16: ab*
        String[] feld16 = {"abbbbb", "abbbb", "abbbbbbbbbbb", "abbbbbbb", "abbbbbbbb", "abbbbbbbbb", "abbbbbbbbbbbb", "abbbbbb", "abb", "abbb", "abbbbbbbbbb", "ab"};
        int invSoll16 = 0;

// 17: b*a
        String[] feld17 = {"baaaaaa", "baaaaa", "baaaaaaaaaaaa", "baaaaaaaa", "baaaaaaaaa", "baaaaaaaaaa", "baaaaaaaaaaaaa", "baaaaaaa", "baaa", "baaaa", "baaaaaaaaaaa", "baa"};
        int invSoll17 = 38;

// 18: ab* und ba*
        String[] feld18 = {"baaaaaa", "baaaaa", "abbbbbbb", "abbbbbbbb", "abbbbbbbbb", "abbbbbbbbbbbb", "abbbbbb", "abb", "abbb", "abbbbbbbbbb", "ab", "baaaaaaaaaaaa", "baaaaaaaa", "baaaaaaaaa", "baaaaaaaaaa", "baaaaaaaaaaaaa", "baaaaaaa", "baaa", "baaaa", "baaaaaaaaaaa", "baa", "abbbbb", "abbbb", "abbbbbbbbbbb"};
        int invSoll18 = 92;

// 19: fallend dann steigend
        String[] feld19 = {"bccca", "cbcca", "ccbca", "cccba", "bccac", "cbcac", "ccbac", "cccab", "bcacc", "cbacc", "ccabc", "ccacb", "baccc", "cabcc", "cacbc", "caccb", "abccc", "acbcc", "accbc", "acccb", "abbbbb", "abbbb", "abbbbbbbbbbb", "abbbbbbb", "abbbbbbbb", "abbbbbbbbb", "abbbbbbbbbbbb", "abbbbbb", "abb", "abbb", "abbbbbbbbbb", "ab"};
        int invSoll19 = 418;

// 20: b und a
        String[] feld20 = {"a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "b", "a", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "a", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "a", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "a", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "a", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "a"};
        int invSoll20 = 3563;

        IInversionszahl invz = new Inversionszahl_tmohr();

        String[][] felder = {feld1, feld2, feld3, feld4, feld5, feld6, feld7, feld8, feld9, feld10, feld11, feld12, feld13, feld14, feld15, feld16, feld17, feld18, feld19, feld20};
        int[] invs = {invSoll1, invSoll2, invSoll3, invSoll4, invSoll5, invSoll6, invSoll7, invSoll8, invSoll9, invSoll10, invSoll11, invSoll12, invSoll13, invSoll14, invSoll15, invSoll16, invSoll17, invSoll18, invSoll19, invSoll20};

        for (int i = 1; i < invs.length + 1; i++) {
            int inv = invz.berechne(felder[i-1]);
            if (inv == invs[i-1]) System.out.println("Testfall " + i + " erfolgreich");
            else System.out.println("Fehler bei der Bearbeitung von Testfall "+i+" (" + inv + " statt " + invs[i-1] + ")");
        }
    }
}
